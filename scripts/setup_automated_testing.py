#!/usr/bin/env python3
"""
Automated Testing Setup Script

This script sets up the automated testing infrastructure including:
- Pre-commit hooks
- Git hooks configuration
- Cron job setup (optional)
- CI/CD integration files

Usage:
    python scripts/setup_automated_testing.py --install-hooks
    python scripts/setup_automated_testing.py --setup-cron
    python scripts/setup_automated_testing.py --full-setup
"""

import os
import sys
import argparse
import subprocess
from pathlib import Path
from typing import List, Dict, Any

def create_git_hook(hook_name: str, script_path: str) -> bool:
    """Create a git hook that runs our validation script."""
    git_hooks_dir = Path(".git/hooks")
    hook_file = git_hooks_dir / hook_name
    
    if not git_hooks_dir.exists():
        print(f"‚ùå Git hooks directory not found: {git_hooks_dir}")
        return False
    
    # Create hook content
    hook_content = f"""#!/bin/bash
# Automated testing hook for {hook_name}
# Generated by setup_automated_testing.py

# Change to repository root
cd "$(git rev-parse --show-toplevel)"

# Run validation script
python {script_path} --strict

# Exit with script's exit code
exit $?
"""
    
    try:
        with open(hook_file, 'w') as f:
            f.write(hook_content)
        
        # Make hook executable
        hook_file.chmod(0o755)
        
        print(f"‚úÖ Created git hook: {hook_name}")
        return True
    except Exception as e:
        print(f"‚ùå Failed to create git hook {hook_name}: {str(e)}")
        return False

def install_pre_commit_hooks() -> bool:
    """Install pre-commit hooks."""
    print("üîß Installing pre-commit hooks...")
    
    hooks_created = 0
    total_hooks = 0
    
    # Pre-commit hook
    if create_git_hook("pre-commit", "scripts/pre_commit_hook.py"):
        hooks_created += 1
    total_hooks += 1
    
    # Pre-push hook (optional)
    if create_git_hook("pre-push", "scripts/automated_testing_workflow.py --workflow quick --quality-gates"):
        hooks_created += 1
    total_hooks += 1
    
    print(f"üìä Pre-commit hooks: {hooks_created}/{total_hooks} created successfully")
    return hooks_created == total_hooks

def create_cron_job(script_path: str, frequency: str) -> str:
    """Create a cron job entry."""
    if frequency == "weekly":
        # Run every Sunday at 2 AM
        schedule = "0 2 * * 0"
    elif frequency == "monthly":
        # Run on the first day of each month at 2 AM
        schedule = "0 2 1 * *"
    else:
        # Daily at 2 AM
        schedule = "0 2 * * *"
    
    # Get absolute path to script
    script_abs_path = Path(script_path).resolve()
    repo_path = Path.cwd().resolve()
    
    cron_entry = f"{schedule} cd {repo_path} && python {script_abs_path} --frequency {frequency} --save-history >> {repo_path}/logs/cron.log 2>&1"
    
    return cron_entry

def setup_cron_jobs() -> bool:
    """Set up cron jobs for periodic validation."""
    print("‚è∞ Setting up cron jobs...")
    
    # Create logs directory
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    # Generate cron entries
    weekly_cron = create_cron_job("scripts/periodic_validation.py", "weekly")
    monthly_cron = create_cron_job("scripts/periodic_validation.py", "monthly")
    
    # Save cron entries to file
    cron_file = Path("scripts/cron_jobs.txt")
    cron_content = f"""# Automated Testing Cron Jobs
# Generated by setup_automated_testing.py
# 
# To install these cron jobs, run:
# crontab -e
# Then copy and paste the entries below:

# Weekly validation (every Sunday at 2 AM)
{weekly_cron}

# Monthly validation (first day of each month at 2 AM)
{monthly_cron}

# Note: Make sure the paths are correct for your system
# You may need to adjust the Python path or virtual environment activation
"""
    
    try:
        with open(cron_file, 'w') as f:
            f.write(cron_content)
        
        print(f"‚úÖ Cron jobs saved to: {cron_file}")
        print("üìù To install cron jobs, run: crontab scripts/cron_jobs.txt")
        return True
    except Exception as e:
        print(f"‚ùå Failed to create cron jobs file: {str(e)}")
        return False

def create_ci_config() -> bool:
    """Create CI/CD configuration files."""
    print("üîÑ Creating CI/CD configuration...")
    
    # GitHub Actions workflow
    github_workflow = """name: Automated Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run quick tests
      run: python scripts/automated_testing_workflow.py --workflow quick --coverage
    
    - name: Run cross-platform validation
      run: python scripts/validate_cross_platform_tests.py
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./htmlcov/coverage.json
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  periodic-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run periodic validation
      run: python scripts/periodic_validation.py --frequency weekly --save-history
    
    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: test_reports/
"""
    
    # Create .github/workflows directory
    workflows_dir = Path(".github/workflows")
    workflows_dir.mkdir(parents=True, exist_ok=True)
    
    try:
        with open(workflows_dir / "automated_testing.yml", 'w') as f:
            f.write(github_workflow)
        
        print("‚úÖ Created GitHub Actions workflow: .github/workflows/automated_testing.yml")
        return True
    except Exception as e:
        print(f"‚ùå Failed to create CI configuration: {str(e)}")
        return False

def create_documentation() -> bool:
    """Create documentation for the automated testing system."""
    print("üìö Creating documentation...")
    
    docs = """# Automated Testing System

## Overview
This project includes a comprehensive automated testing system that ensures:
- Cross-platform compatibility
- Code coverage maintenance
- Test quality standards
- Performance monitoring

## Quick Start

### Pre-commit Validation
```bash
# Run pre-commit checks manually
python scripts/pre_commit_hook.py

# Run with strict mode (blocks commit on failure)
python scripts/pre_commit_hook.py --strict
```

### Automated Workflows
```bash
# Quick workflow (2-3 minutes)
python scripts/automated_testing_workflow.py --workflow quick

# Full workflow with coverage (10-15 minutes)
python scripts/automated_testing_workflow.py --workflow full --coverage

# Periodic validation (30-60 minutes)
python scripts/automated_testing_workflow.py --workflow periodic --report
```

### Cross-Platform Validation
```bash
# Validate all platform test scripts
python scripts/validate_cross_platform_tests.py
```

### Coverage Analysis
```bash
# Quick coverage check
python scripts/quick_rl_coverage.py

# Full coverage analysis (memory-optimized)
python scripts/coverage_analysis.py
```

## Configuration

### Pre-commit Hooks
Pre-commit hooks are automatically installed and run:
- **pre-commit**: Validates code before commit
- **pre-push**: Runs quick tests before push

### Cron Jobs
Periodic validation can be scheduled via cron:
```bash
# Install cron jobs
crontab scripts/cron_jobs.txt
```

### CI/CD Integration
GitHub Actions workflow automatically runs:
- Tests on every push/PR
- Weekly periodic validation
- Coverage reporting

## Quality Gates

### Test Quality
- All tests must pass
- No flaky tests allowed
- Fast execution (< 1 second per test)

### Coverage Requirements
- Minimum 85% overall coverage
- Critical modules: 90%+ coverage
- Coverage trends must be stable

### Cross-Platform Standards
- All platforms must have consistent test scripts
- Same test results across platforms
- Proper error handling for platform differences

## Troubleshooting

### Common Issues
1. **Pre-commit hook fails**: Check test failures or coverage drops
2. **Cross-platform validation fails**: Verify script consistency
3. **Coverage analysis timeout**: Use chunked analysis for large test suites

### Debugging
```bash
# Run with verbose output
python scripts/pre_commit_hook.py --skip-tests

# Check specific components
python scripts/validate_cross_platform_tests.py
python scripts/quick_rl_coverage.py
```

## Maintenance

### Regular Tasks
- Weekly: Review periodic validation reports
- Monthly: Analyze coverage trends
- Quarterly: Update quality thresholds

### Updates
- Keep testing tools current
- Review and update quality gates
- Monitor performance trends

## Support
For issues with the automated testing system:
1. Check the troubleshooting section
2. Review validation reports in `test_reports/`
3. Run individual validation scripts
4. Check CI/CD logs for detailed error information
"""
    
    try:
        with open("docs/automated_testing_guide.md", 'w') as f:
            f.write(docs)
        
        print("‚úÖ Created documentation: docs/automated_testing_guide.md")
        return True
    except Exception as e:
        print(f"‚ùå Failed to create documentation: {str(e)}")
        return False

def verify_setup() -> bool:
    """Verify that the setup is working correctly."""
    print("üîç Verifying setup...")
    
    checks = []
    
    # Check if git hooks exist
    pre_commit_hook = Path(".git/hooks/pre-commit")
    checks.append(("Pre-commit hook exists", pre_commit_hook.exists()))
    
    # Check if scripts are executable
    scripts = [
        "scripts/pre_commit_hook.py",
        "scripts/automated_testing_workflow.py",
        "scripts/validate_cross_platform_tests.py",
        "scripts/periodic_validation.py"
    ]
    
    for script in scripts:
        script_path = Path(script)
        checks.append((f"{script} exists", script_path.exists()))
    
    # Check if directories exist
    directories = ["test_reports", "logs", ".github/workflows"]
    for directory in directories:
        dir_path = Path(directory)
        checks.append((f"{directory} directory exists", dir_path.exists()))
    
    # Print results
    print("\nüìã Setup Verification Results:")
    print("-" * 40)
    
    all_passed = True
    for check_name, passed in checks:
        status = "‚úÖ PASSED" if passed else "‚ùå FAILED"
        print(f"{check_name}: {status}")
        if not passed:
            all_passed = False
    
    print(f"\nOverall: {'‚úÖ SETUP COMPLETE' if all_passed else '‚ùå SETUP INCOMPLETE'}")
    
    return all_passed

def main():
    """Main setup function."""
    parser = argparse.ArgumentParser(description="Automated Testing Setup")
    parser.add_argument(
        "--install-hooks",
        action="store_true",
        help="Install pre-commit hooks"
    )
    parser.add_argument(
        "--setup-cron",
        action="store_true",
        help="Set up cron jobs for periodic validation"
    )
    parser.add_argument(
        "--create-ci",
        action="store_true",
        help="Create CI/CD configuration"
    )
    parser.add_argument(
        "--create-docs",
        action="store_true",
        help="Create documentation"
    )
    parser.add_argument(
        "--full-setup",
        action="store_true",
        help="Run complete setup (all options)"
    )
    parser.add_argument(
        "--verify",
        action="store_true",
        help="Verify setup after installation"
    )
    
    args = parser.parse_args()
    
    print("üöÄ Automated Testing Setup")
    print("=" * 40)
    
    success = True
    
    # Run requested setup steps
    if args.full_setup or args.install_hooks:
        if not install_pre_commit_hooks():
            success = False
    
    if args.full_setup or args.setup_cron:
        if not setup_cron_jobs():
            success = False
    
    if args.full_setup or args.create_ci:
        if not create_ci_config():
            success = False
    
    if args.full_setup or args.create_docs:
        if not create_documentation():
            success = False
    
    # Verify setup if requested
    if args.verify or args.full_setup:
        if not verify_setup():
            success = False
    
    # Summary
    print("\n" + "=" * 40)
    if success:
        print("üéâ Setup completed successfully!")
        print("\nüìù Next steps:")
        print("1. Review the created configuration files")
        print("2. Test the pre-commit hooks with a small change")
        print("3. Set up cron jobs if needed: crontab scripts/cron_jobs.txt")
        print("4. Check the documentation: docs/automated_testing_guide.md")
        sys.exit(0)
    else:
        print("‚ùå Setup completed with issues")
        print("Please review the errors above and try again")
        sys.exit(1)

if __name__ == "__main__":
    main() 