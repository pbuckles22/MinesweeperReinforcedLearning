# Minesweeper RL Project Rules

## Project Context
This is a Reinforcement Learning environment for Minesweeper using Stable Baselines3 (PPO) with curriculum learning and MLflow tracking.

## Key Design Decisions
- **Immediate Rewards**: Every safe reveal gets +15, every mine hit gets -20, wins get +500 (simplified from confusing first-move logic)
- **Board Sizes**: All use (height, width) format throughout codebase
- **Environment**: 4-channel state representation with action masking
- **M1 GPU Support**: Optimized for Apple Silicon with Metal Performance Shaders (MPS)
- **Cross-Platform Scripts**: Platform-specific scripts in `scripts/windows/`, `scripts/linux/`, `scripts/mac/`

## Cross-Platform Test Compatibility
- **Test Flexibility**: Script tests adapt to different platforms (Mac/Windows/Linux)
- **PowerShell Handling**: Tests check for PowerShell availability before using it
- **Script Validation**: Content-based validation when platform-specific tools unavailable
- **Permission Handling**: Different permission requirements per platform (executable vs readable)
- **Output Handling**: Accepts various output methods (echo, write-host, python, source)
- **Error Handling**: Flexible error handling validation for simple and complex scripts

## Critical Learning Insights
- **Game Logic is Correct**: Environment randomization and win conditions work perfectly
- **Reward System Matters**: Immediate rewards (not sparse) are essential for learning
- **Curriculum Learning**: Realistic win rate thresholds (15%, 12%, 10%, 8%, 5%, 3%, 2%) enable progression
- **Training Complexity**: Even simple 4x4 boards are challenging for RL agents
- **Performance**: Use M1 Mac for longer training runs (GPU acceleration)

## Important Files
- `src/core/minesweeper_env.py` - Main environment (simplified reward logic)
- `src/core/train_agent.py` - Training script with curriculum learning
- `src/core/constants.py` - Reward constants
- `tests/` - 516 comprehensive tests
- `scripts/mac/` - Mac-specific training scripts

## When Helping
- Use immediate rewards for all actions (no first-move special cases)
- Use (height, width) format for board dimensions
- Check CONTEXT.md for detailed project information
- Run tests to verify changes work correctly
- Recommend M1 Mac for intensive training
- Focus on learning improvements, not game logic bugs
- Ensure cross-platform compatibility when modifying tests or scripts 